#!/bin/sh


jail::get_next_id(){
  expr $(
    ( grep -s '$id' /etc/jail.conf.d/* || echo '$id = "0";' ) |
    tail -1 |
    awk -F '[="]' '{print $3}'
  ) + 1
}

jail::start(){
  local _name="$1"
  jail -f /etc/jail.conf.d/${_name}.conf -c ${_name}
}

jail::stop(){
  local _name="$1"
  jail -f /etc/jail.conf.d/${_name}.conf -r ${_name}
}

jail::extract(){
  local _name=$1 _version=$2
  mkdir -p ${jailio_dir}/.dist-files
  [ -z ${FreeBSD_mirror} ] && FreeBSD_mirror="https://download.freebsd.org/ftp"
  [ -e ${jailio_dir}/.dist-files/base-${_version}.txz ] && checksum ${_version}  || fetch -o ${jailio_dir}/.dist-files/base-${_version}.txz ${FreeBSD_mirror}/releases/$(uname -m)/${_version}/base.txz && checksum ${_version}
  tar -xf ${jailio_dir}/.dist-files/base-${_version}.txz -C ${jailio_dir}/${_name}/
}

checksum(){
  local _version=$1
  sha256 -qc $(fetch -qo - ${FreeBSD_mirror}/releases/$(uname -m)/${_version}/MANIFEST | grep base.txz | cut -f 2) ${jailio_dir}/.dist-files/base-${_version}.txz
}


jail::create(){
  local _name _id _path
  local _version _snap
  local _addr _switch _domain
  local _silent
  local _gw _netmask

  while getopts :a:b:d:h:ns:v: _opt; do
    case ${_opt} in
      a) _addr="${OPTARG}" ;;
      b) _switch="${OPTARG}" ;;
      d) _domain="${OPTARG}" ;;
      h) _hooks="${OPTARG}" ;;
      n) _silent="yes" ;;
      s) _snap="${OPTARG}" ;;
      v) _version="${OPTARG}" ;;
      *) util::usage ;;
    esac
  done
  shift $((OPTIND - 1))

  _name="$1"
  _id=$(jail::get_next_id)
  _path=${jailio_dir}/${_name}
  _gw=$(ifconfig -f inet:dotted ${_switch} | awk '/inet/ {print $2}')
  _netmask=$(ifconfig -f inet:dotted ${_switch} | awk '/inet/ {print $4}')
  echo "id is ${_id}"
  cat << EOF >> /etc/jail.conf.d/${_name}.conf
# vim: set syntax=sh:
exec.clean;
allow.raw_sockets;
mount.devfs;

${_name} {
    \$id     = "${_id}";
    \$ipaddr = "${_addr}";
    \$mask   = "${_netmask}";
    \$gw     = "${_gw}";
    \$bridge = "${_switch}";
    \$domain = "${_domain}";
    vnet;
    vnet.interface = "epair\${id}b";

    exec.prestart   = "ifconfig epair\${id} create up";
    exec.prestart  += "ifconfig epair\${id}a up descr vnet-\${name}";
    exec.prestart  += "ifconfig \${bridge} addm epair\${id}a up";

    exec.start      = "/sbin/ifconfig lo0 127.0.0.1 up";
    exec.start     += "/sbin/ifconfig epair\${id}b \${ipaddr} netmask \${mask} up";
    exec.start     += "/sbin/route add default \${gw}";
    exec.start     += "/bin/sh /etc/rc";

    exec.prestop    = "ifconfig epair\${id}b -vnet \${name}";

    exec.poststop   = "ifconfig \${bridge} deletem epair\${id}a";
    exec.poststop  += "ifconfig epair\${id}a destroy";

    host.hostname = "\${name}.\${domain}";
    path = "${_path}";
    exec.consolelog = "/var/log/jail/\${name}.log";
    persist;
}
EOF


  [ ! -z ${_snap} ]   && zfs clone ${JAILIO_ZFS_DATASET}/${_snap} ${JAILIO_ZFS_DATASET}/${_name} || ( zfs create ${JAILIO_ZFS_DATASET}/${_name} && jail::extract ${_name} ${_version} )
  [ ! -z ${_silent} ] && sysrc -f "${_path}"/etc/rc.conf cron_enable="NO" sendmail_enable="NONE" syslogd_flags="-ss" clear_tmp_enable="YES"

  sysrc jail_list+="${_name}"
  jail::start ${_name}
}

jail::console() {
  local _name="$1"
  jexec -l ${_name} /bin/tcsh
}

jail::exec() {
  local _name _script

  while getopts :f: _opt; do
    case ${_opt} in
      f) _script="${OPTARG}" ;;
      *) util::usage ;;
    esac
  done
  shift $((OPTIND - 1))
  _name="$1"
  jexec -l ${_name} /bin/sh -s < ${_script}
}
