#!/bin/sh

jail::list(){
  local _json _format _style="text"
  local _hostname _ipaddr _state _jid _gateway

  while getopts j _opt; do
    case ${_opt} in
      j) _json="json" ;;
    esac
  done
  shift $((OPTIND - 1))

  _jformact='{:name}^{:state}^{:jid}^{:hostname}^{:ipv4}^{:gateway}\n'
  _jformstp='{:name}^{:state}\n'
  {
    [ ! -z ${_json} ]  && printf '[' || xo "${_jformact}" "NAME" "STATE" "JID" "HOSTNAME" "IPv4" "GW"
      for _j in $(sysrc -n jail_list);
      do
        if jls -j ${_j} jid > /dev/null 2>&1 ; then
          _hostname=$(jexec ${_j} hostname)
          _ipaddr=$(jexec ${_j} ifconfig -f inet:cidr $(jexec ${_j} ifconfig -g epair | head -1) | awk '/inet / {print $2}')
          _gateway=$(jexec ${_j} route -n get default | awk '/gateway/ {print $2}')
          _state="Active"
          _jid=$(jls -j ${_j} jid)
          _format="${_jformact}"
        else
          _state="Stopped"
          _format="${_jformstp}"
        fi
        [ ! -z ${_json} ] && _style="json" && printf "{"
        xo --style "${_style}" "${_format}" "${_j}" "${_state}" "${_jid}" "${_hostname}" "${_ipaddr}" "${_gateway}"
        [ ! -z ${_json} ] && printf "}"
      done
    [ ! -z ${_json} ] && printf ']\n'
  } | ( [ ! -z ${_json} ] && sed -e "s/}{/},{/g" || column -ts^ )
}

jail::info(){
  local _json _format _style="text"
  local _hostname _ipaddr _state _jid _gateway _netmask

  while getopts j _opt; do
    case ${_opt} in
      j) _json="json" ;;
    esac
  done
  shift $((OPTIND - 1))

  _jname="${1}"

  _jformact='Name: {:name}\nState: {:state}\nJID: {:jid}\nHostname: {:hostname}\nIPv4: {:ipv4}\nNetmask: {:netmask}\nGateway: {:gateway}\n'
  _jformstp='Name: {:name}\nState: {:state}\n'

  if sysrc -n jail_list | tr ' ' '\n' | grep "^${_jname}$" > /dev/null 2>&1 ; then
    if jls -j ${_jname} > /dev/null 2>&1 ; then
      _hostname=$(jexec ${_jname} hostname)
      _jid=$(jls -j ${_jname} jid)
      _ipaddr=$(jexec ${_jname} ifconfig -f inet:dotted $(jexec ${_jname} ifconfig -g epair | head -1) | awk '/inet / {print $2}')
      _gateway=$(jexec ${_jname} route -n get default | awk '/gateway/ {print $2}')
      _netmask=$(jexec ${_jname} ifconfig -f inet:dotted $(jexec ${_jname} ifconfig -g epair | head -1) | awk '/netmask/ {print $4}')
      _state="Active"
      _format="${_jformact}"
    else
      _state="Stopped"
      _format="${_jformstp}"
    fi
  else
    _state="Not found"
    _format="${_jformstp}"
  fi

  [ ! -z ${_json} ] && _style="json" && printf "{"
  xo --style "${_style}" "${_format}" "${_jname}" "${_state}" "${_jid}" "${_hostname}" "${_ipaddr}" "${_netmask}" "${_gateway}"
  [ ! -z ${_json} ] && _style="json" && printf "}"
}


jail::get_next_id(){
  expr $(
    ( grep -s '$id' /etc/jail.conf.d/* || echo '$id = "0";' ) |
    awk -F '[="]' '{print $3}' |
    sort -h |
    tail -1
  ) + 1
}

jail::start(){
  local _name="$1"
  if !(jail -f /etc/jail.conf.d/${_name}.conf -c ${_name} > /dev/null 2>&1); then
    return 1
  fi
  echo "${_name}: started"
}

jail::stop(){
  local _name="$1"
  jail::checkexists ${_name}
  jail -f /etc/jail.conf.d/${_name}.conf -r ${_name} > /dev/null 2>&1
  echo "${_name}: stopped"
}

jail::destroy(){
  local _name="$1"

  if jls -j ${_name} > /dev/null 2>&1; then
    jail::stop ${_name}
  fi

  net::rdr_del del -j ${_name} -f > /dev/null 2>&1 && 
    net::nat_del del ${_name}     > /dev/null 2>&1

  jail::_destroyzfs ${_name}

  rm /etc/jail.conf.d/${_name}.conf > /dev/null 2>&1
  sysrc jail_list-="${_name}"       > /dev/null 2>&1
  echo "${_name}: destroyed"
}

jail::_destroyzfs(){
  local _name="$1"
  sleep 2
  zfs destroy -r ${JAILER_ZFS_DATASET}/${_name} || util::err "ZFS Destroy error, please check dataset dependency"
}

jail::bootstrap::extract(){
  local version=$1
  mkdir -p ${jailer_dir}/bootstrap/dist-files
  : ${FreeBSD_mirror:="https://download.FreeBSD.org/ftp"}
  if ! ([ -e ${jailer_dir}/bootstrap/dist-files/base-${_version}.txz ] &&   \
        jail::bootstrap::_checksum ${_version}); then
    if ! (fetch -o ${jailer_dir}/bootstrap/dist-files/base-${_version}.txz  \
	${FreeBSD_mirror}/releases/${UNAME_m}/${_version}/base.txz &&       \
	jail::bootstrap::_checksum ${_version}); then
      jail::exception::bootstrap
    fi
  fi
  if [ ! -d ${jailer_dir}/bootstrap/${_version} ]; then
    tar -xf ${jailer_dir}/bootstrap/dist-files/base-${_version}.txz -C \
      ${jailer_dir}/bootstrap/${_version}/
  fi
}

jail::bootstrap::_checksum(){
  local _version=$1
  sha256 -qc \
    $(fetch -qo - ${FreeBSD_mirror}/releases/${UNAME_m}/${_version}/MANIFEST |
    grep base.txz | cut -f 2) ${jailer_dir}/bootstrap/dist-files/base-${_version}.txz \
    > /dev/null
}

jail::bootstrap(){
  if [ $# -eq 0 ]; then
    zfs list -t snap -Ho name -r ${JAILER_ZFS_DATASET}/bootstrap |
      awk '{ sub(/.*bootstrap\//,""); sub(/@.*$/,""); print }'
    exit 0
  elif [ $# -eq 1 ]; then
    local _version="${1}"

    zfs create -p ${JAILER_ZFS_DATASET}/bootstrap/${_version}
    jail::bootstrap::extract ${_version}
    zfs snap ${JAILER_ZFS_DATASET}/bootstrap/${_version}@base
  else
    util::err "bootstrap takes only one argument at a time"
  fi
}

jail::create(){
  local _name _id _path
  local _version=${UNAME_r} _snap
  local _addr _gw _netmask _resolver
  local _bridge="bridge0" _domain=${HOSTNAME}
  local _silent
  local _script _content

  while getopts :a:b:c:d:e:f:g:m:ns:r: _opt; do
    case ${_opt} in
      a) _addr="${OPTARG}" ;;
      b) _bridge="${OPTARG}" ;;
      c) _content="${OPTARG}" ;;
      d) _domain="${OPTARG}" ;;
      e) _resolver="${OPTARG}" ;;
      f) _script="${OPTARG}" ;;
      g) _gw="${OPTARG}" ;;
      m) _netmask="${OPTARG}" ;;
      n) _silent="yes" ;;
      r) _version="${OPTARG}" ;;
      s) _snap="${OPTARG}" ;;
      *) util::usage ;;
    esac
  done
  shift $((OPTIND - 1))

  _name="${1:-$(uuidgen)}"
  _id=$(jail::get_next_id)
  _path=${jailer_dir}/${_name}

  # Sanity Checks
  if [ -e /etc/jail.conf.d/${_name}.conf ]; then
    util::err "${_name} already exists"
  fi
  if [ ! -d ${jailer_dir}/bootstrap/${_version} ]; then
    util::err "${_version} does not exist, try bootstrapping first"
  fi

  # First, we check for Gateway and Netmask; If not set, we get it from the bridge
  [ -z "${_gw}" ]       && _gw=$(ifconfig -f inet:dotted ${_bridge} | awk '/inet/ {print $2}')
  [ -z "${_netmask}" ]  && _netmask=$(ifconfig -f inet:dotted ${_bridge} | awk '/inet/ {print $4}')

  # If address is set to DHCP then we generate a MAC address and set devfs_ruleset
  if [ ${_addr} = "DHCP" ]; then
    _macaddr=$(openssl rand -hex 6 | sed -r 's/^(.{6}).*$/\1/; s/([0-9a-f]{2})/\1:/g; s/:$//; s/^/58:9c:fc:/;')
    _netvars=$(cat <<EOF
    devfs_ruleset = 10;
EOF
)

  cat << EOF > /etc/jail.conf.d/${_name}.conf
# vim: set syntax=sh:
exec.clean;
allow.raw_sockets;
mount.devfs;

${_name} {
    \$id     = "${_id}";
${_netvars}
    \$bridge = "${_bridge}";
    \$domain = "${_domain}";
    vnet;
    vnet.interface = "epair\${id}b";

    exec.prestart   = "ifconfig epair\${id} create up";
    exec.prestart  += "ifconfig epair\${id}a up descr vnet-\${name}";
    exec.prestart  += "ifconfig \${bridge} addm epair\${id}a up";

    exec.start      = "/sbin/ifconfig lo0 127.0.0.1 up";
    exec.start     += "/bin/sh /etc/rc";

    exec.prestop    = "ifconfig epair\${id}b -vnet \${name}";

    exec.poststop   = "ifconfig \${bridge} deletem epair\${id}a";
    exec.poststop  += "ifconfig epair\${id}a destroy";

    host.hostname = "\${name}.\${domain}";
    path = "${_path}";
    exec.consolelog = "/var/log/jail/\${name}.log";
    persist;
}
EOF

  # ZFS clone / snap
  if [ ! -z ${_snap} ]; then
    zfs clone ${JAILER_ZFS_DATASET}/${_snap} ${JAILER_ZFS_DATASET}/${_name}
  else
    (zfs send ${JAILER_ZFS_DATASET}/bootstrap/${_version}@base |
     zfs recv ${JAILER_ZFS_DATASET}/${_name})
  fi

  # Set the resolver
  cp /etc/resolv.conf "${_path}/etc/resolv.conf"
  if [ ! -z ${_resolver} ]; then
    echo "nameserver ${_resolver}" > "${_path}/etc/resolv.conf"
  fi

  # Set MAC address if using DHCP
  if [ ${_addr} = "DHCP" ]; then
    echo "ifconfig epair${_id}b ether ${_macaddr}" > "${_path}/etc/start_if.epair${_id}b"
    sysrc -q -f "${_path}/etc/rc.conf" ifconfig_epair${_id}b="SYNCDHCP"
  # Otherwise use the provided address
  else
    sysrc -q -f "${_path}/etc/rc.conf" ifconfig_epair${_id}b="inet ${_addr} netmask ${_netmask} up"
    sysrc -q -f "${_path}/etc/rc.conf" defaultrouter="${_gw}"
  fi

  # Set silent if required
  if [ ! -z ${_silent} ]; then
    sysrc -q -f "${_path}"/etc/rc.conf cron_enable="NO" \
      sendmail_enable="NONE" syslogd_flags="-ss"
  fi

  # Copy content if provided
  if [ ! -z ${_content} ]; then
    cp -a ${_content} ${_path}/tmp/
  fi

  sysrc -q jail_list+="${_name}" > /dev/null 2>&1
  if !(jail::start ${_name}); then
    jail::exception::create
  fi

  if [ ! -z ${_script} ]; then
    jail::exec -f ${_script} ${_name}
  fi
}

jail::console() {
  local _name="$1"
  jail::checkexists ${_name}
  jexec -l ${_name} /bin/tcsh
}

jail::exec() {
  local _name _script

  while getopts :f: _opt; do
    case ${_opt} in
      f) _script="${OPTARG}" ;;
      *) util::usage ;;
    esac
  done
  shift $((OPTIND - 1))
  _name="$1"
  jail::checkexists ${_name}
  jexec -l ${_name} /bin/sh -s < ${_script}
}

jail::edit() {
  : ${EDITOR:=vi}

  [ $# -lt 1 ] && help::edit

  local _name="$1"
  local _file="/etc/jail.conf.d/${_name}.conf"
  if [ ! -e ${_file} ]; then
    util::err "Configuration file for ${_name} does not exist"
  fi
  ${EDITOR} ${_file}
}

jail::checkexists(){
  _name="${1}"
  jls -j ${_name} > /dev/null 2>&1 || util::err "Jail ${_name} does not exist. Use 'jailer list'"
}
